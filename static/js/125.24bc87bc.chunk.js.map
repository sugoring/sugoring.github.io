{"version":3,"file":"static/js/125.24bc87bc.chunk.js","mappings":"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","sources":["api/mocks/categories.mock.ts","api/mocks/login.mock.ts","api/mocks/order.mock.ts","api/mocks/productDetail.mock.ts","api/mocks/productOptions.mock.ts","api/mocks/products.mock.ts","api/mocks/wishlist.mock.ts","mocks/browser.ts"],"sourcesContent":["// src/api/mocks/categories.mock.ts\n\nimport { rest } from 'msw';\n\nimport type { CategoryData } from '@/types';\n\n// 확장된 모의 카테고리 데이터\nconst mockCategories: CategoryData[] = [\n  {\n    id: 1,\n    name: '커피',\n    color: '#6F4E37',\n    imageUrl: 'https://example.com/coffee.jpg',\n    description: '다양한 원두로 만든 신선한 커피',\n  },\n  {\n    id: 2,\n    name: '차',\n    color: '#008000',\n    imageUrl: 'https://example.com/tea.jpg',\n    description: '향긋한 차 컬렉션',\n  },\n  {\n    id: 3,\n    name: '베이커리',\n    color: '#D2691E',\n    imageUrl: 'https://example.com/bakery.jpg',\n    description: '매일 아침 갓 구운 빵과 페이스트리',\n  },\n  {\n    id: 4,\n    name: '디저트',\n    color: '#FF69B4',\n    imageUrl: 'https://example.com/dessert.jpg',\n    description: '달콤한 디저트 모음',\n  },\n  {\n    id: 5,\n    name: '스무디',\n    color: '#FF7F50',\n    imageUrl: 'https://example.com/smoothie.jpg',\n    description: '신선한 과일로 만든 건강한 스무디',\n  },\n  {\n    id: 6,\n    name: '샌드위치',\n    color: '#FFD700',\n    imageUrl: 'https://example.com/sandwich.jpg',\n    description: '다양한 재료로 만든 맛있는 샌드위치',\n  },\n  {\n    id: 7,\n    name: '아이스크림',\n    color: '#87CEFA',\n    imageUrl: 'https://example.com/ice-cream.jpg',\n    description: '시원하고 달콤한 아이스크림',\n  },\n  {\n    id: 8,\n    name: '건강음료',\n    color: '#32CD32',\n    imageUrl: 'https://example.com/healthy-drinks.jpg',\n    description: '영양가 높은 건강 음료',\n  },\n  {\n    id: 9,\n    name: '시즌 메뉴',\n    color: '#9932CC',\n    imageUrl: 'https://example.com/seasonal.jpg',\n    description: '시즌별 특별 메뉴',\n  },\n  {\n    id: 10,\n    name: '브런치',\n    color: '#F4A460',\n    imageUrl: 'https://example.com/brunch.jpg',\n    description: '늦은 아침을 위한 브런치 메뉴',\n  },\n];\n\n// 카테고리 목록 조회 API 모킹\nexport const categoriesMockHandler = [\n  rest.get('/api/categories', (_, res, ctx) => {\n    return res(ctx.status(200), ctx.json(mockCategories));\n  }),\n\n  // 개별 카테고리 조회 API 모킹 (추가)\n  rest.get('/api/categories/:categoryId', (req, res, ctx) => {\n    const { categoryId } = req.params;\n    const category = mockCategories.find((c) => c.id === parseInt(categoryId as string, 10));\n\n    if (category) {\n      return res(ctx.status(200), ctx.json(category));\n    } else {\n      return res(ctx.status(404), ctx.json({ message: 'Category not found' }));\n    }\n  }),\n];\n\n// 테스트용 헬퍼 함수들\nexport const getMockCategories = () => mockCategories;\n\nexport const getMockCategory = (categoryId: number) =>\n  mockCategories.find((c) => c.id === categoryId);\n\nexport const getRandomMockCategory = () =>\n  mockCategories[Math.floor(Math.random() * mockCategories.length)];\n","import { rest } from 'msw';\n\nimport type { LoginResponse } from '@/types';\n\n// 가짜 사용자 데이터\nconst fakeUsers = [\n  { email: 'test@example.com', password: 'password123' },\n  { email: 'user@example.com', password: 'userpass' },\n];\n\n// 로그인 성공 응답\nconst loginSuccessResponse: LoginResponse = {\n  email: 'test@example.com', // 예시 이메일 추가\n  token: 'fake-jwt-token',\n};\n\n// 로그인 API 모킹\nconst loginHandler = rest.get('/login', (req, res, ctx) => {\n  const authCode = req.url.searchParams.get('code');\n\n  if (authCode) {\n    return res(ctx.status(200), ctx.json(loginSuccessResponse));\n  } else {\n    return res(ctx.status(401), ctx.json({ message: '인증에 실패했습니다.' }));\n  }\n});\n\n// 인증 코드 발급 API 모킹 (필요한 경우)\nconst getAuthCodeHandler = rest.post('/auth/code', (req, res, ctx) => {\n  const { email, password } = req.body as { email: string; password: string };\n\n  const user = fakeUsers.find((u) => u.email === email && u.password === password);\n\n  if (user) {\n    return res(ctx.status(200), ctx.json({ authCode: 'fake-auth-code' }));\n  } else {\n    return res(ctx.status(401), ctx.json({ message: '이메일 또는 비밀번호가 잘못되었습니다.' }));\n  }\n});\n\nexport const loginMockHandler = [loginHandler, getAuthCodeHandler];\n","import { rest } from 'msw';\n\nimport type { OrderFormData, OrderHistory } from '@/types';\n\n// 목업 주문 데이터\nexport const mockOrders: OrderHistory[] = [\n  { id: 1, optionId: 101, count: 2 },\n  { id: 2, optionId: 102, count: 1 },\n  { id: 3, optionId: 103, count: 3 },\n  { id: 4, optionId: 104, count: 1 },\n  { id: 5, optionId: 105, count: 2 },\n];\n\n// MSW 핸들러 정의\nexport const orderHandlers = [\n  // 주문 목록 조회\n  rest.get('/api/orders', (req, res, ctx) => {\n    const page = Number(req.url.searchParams.get('page')) || 0;\n    const size = Number(req.url.searchParams.get('size')) || 10;\n    const startIndex = page * size;\n    const endIndex = startIndex + size;\n    const paginatedOrders = mockOrders.slice(startIndex, endIndex);\n\n    return res(ctx.status(200), ctx.json(paginatedOrders));\n  }),\n\n  // 주문 생성\n  rest.post('/api/orders', async (req, res, ctx) => {\n    const orderData = (await req.json()) as OrderFormData;\n    const newOrder: OrderHistory = {\n      id: Math.floor(Math.random() * 1000) + 100,\n      optionId: orderData.productId,\n      count: orderData.productQuantity,\n    };\n    mockOrders.push(newOrder);\n\n    return res(ctx.status(201), ctx.json(newOrder));\n  }),\n\n  // 주문 취소\n  rest.delete('/api/orders/:orderId', (req, res, ctx) => {\n    const { orderId } = req.params;\n    const orderIndex = mockOrders.findIndex((order) => order.id === Number(orderId));\n\n    if (orderIndex !== -1) {\n      mockOrders.splice(orderIndex, 1);\n      return res(ctx.status(200), ctx.json({ message: `Order ${orderId} has been cancelled.` }));\n    } else {\n      return res(ctx.status(404), ctx.json({ message: `Order ${orderId} not found.` }));\n    }\n  }),\n];\n","import { rest } from 'msw';\n\nimport type { ProductData } from '@/types';\n\nexport const mockProductDetails: ProductData[] = [\n  // 커피 (categoryId: 1)\n  {\n    id: 1,\n    name: '아메리카노',\n    price: 4500,\n    imageUrl: 'https://example.com/americano.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 2,\n    name: '카페라떼',\n    price: 5000,\n    imageUrl: 'https://example.com/caffe-latte.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 3,\n    name: '카푸치노',\n    price: 5500,\n    imageUrl: 'https://example.com/cappuccino.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 4,\n    name: '에스프레소',\n    price: 4000,\n    imageUrl: 'https://example.com/espresso.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 5,\n    name: '바닐라 라떼',\n    price: 5500,\n    imageUrl: 'https://example.com/vanilla-latte.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 6,\n    name: '카라멜 마키아토',\n    price: 5800,\n    imageUrl: 'https://example.com/caramel-macchiato.jpg',\n    categoryId: 1,\n  },\n\n  // 차 (categoryId: 2)\n  {\n    id: 7,\n    name: '녹차',\n    price: 4500,\n    imageUrl: 'https://example.com/green-tea.jpg',\n    categoryId: 2,\n  },\n  {\n    id: 8,\n    name: '얼그레이',\n    price: 4500,\n    imageUrl: 'https://example.com/earl-grey.jpg',\n    categoryId: 2,\n  },\n  {\n    id: 9,\n    name: '카모마일',\n    price: 4500,\n    imageUrl: 'https://example.com/chamomile.jpg',\n    categoryId: 2,\n  },\n  {\n    id: 10,\n    name: '잉글리시 브렉퍼스트',\n    price: 4500,\n    imageUrl: 'https://example.com/english-breakfast.jpg',\n    categoryId: 2,\n  },\n  {\n    id: 11,\n    name: '페퍼민트 티',\n    price: 4500,\n    imageUrl: 'https://example.com/peppermint-tea.jpg',\n    categoryId: 2,\n  },\n\n  // 베이커리 (categoryId: 3)\n  {\n    id: 12,\n    name: '크로와상',\n    price: 3500,\n    imageUrl: 'https://example.com/croissant.jpg',\n    categoryId: 3,\n  },\n  {\n    id: 13,\n    name: '치즈케이크',\n    price: 5500,\n    imageUrl: 'https://example.com/cheesecake.jpg',\n    categoryId: 3,\n  },\n  {\n    id: 14,\n    name: '초코 머핀',\n    price: 3000,\n    imageUrl: 'https://example.com/choco-muffin.jpg',\n    categoryId: 3,\n  },\n  { id: 15, name: '베이글', price: 3500, imageUrl: 'https://example.com/bagel.jpg', categoryId: 3 },\n  {\n    id: 16,\n    name: '시나몬 롤',\n    price: 4000,\n    imageUrl: 'https://example.com/cinnamon-roll.jpg',\n    categoryId: 3,\n  },\n\n  // 스무디 (categoryId: 5)\n  {\n    id: 17,\n    name: '딸기 스무디',\n    price: 5500,\n    imageUrl: 'https://example.com/strawberry-smoothie.jpg',\n    categoryId: 5,\n  },\n  {\n    id: 18,\n    name: '블루베리 스무디',\n    price: 5500,\n    imageUrl: 'https://example.com/blueberry-smoothie.jpg',\n    categoryId: 5,\n  },\n  {\n    id: 19,\n    name: '망고 스무디',\n    price: 5800,\n    imageUrl: 'https://example.com/mango-smoothie.jpg',\n    categoryId: 5,\n  },\n\n  // 샌드위치 (categoryId: 6)\n  {\n    id: 20,\n    name: '햄치즈 샌드위치',\n    price: 5500,\n    imageUrl: 'https://example.com/ham-cheese-sandwich.jpg',\n    categoryId: 6,\n  },\n  {\n    id: 21,\n    name: '에그 샐러드 샌드위치',\n    price: 5000,\n    imageUrl: 'https://example.com/egg-salad-sandwich.jpg',\n    categoryId: 6,\n  },\n  {\n    id: 22,\n    name: '치킨 아보카도 샌드위치',\n    price: 6000,\n    imageUrl: 'https://example.com/chicken-avocado-sandwich.jpg',\n    categoryId: 6,\n  },\n\n  // 아이스크림 (categoryId: 7)\n  {\n    id: 23,\n    name: '바닐라 아이스크림',\n    price: 3500,\n    imageUrl: 'https://example.com/vanilla-ice-cream.jpg',\n    categoryId: 7,\n  },\n  {\n    id: 24,\n    name: '초코 아이스크림',\n    price: 3500,\n    imageUrl: 'https://example.com/chocolate-ice-cream.jpg',\n    categoryId: 7,\n  },\n  {\n    id: 25,\n    name: '민트 초코칩 아이스크림',\n    price: 4000,\n    imageUrl: 'https://example.com/mint-choco-ice-cream.jpg',\n    categoryId: 7,\n  },\n];\n\n// MSW 핸들러\nexport const productDetailMockHandler = [\n  rest.get('/api/products/:productId', (req, res, ctx) => {\n    const { productId } = req.params;\n    const id = parseInt(productId as string, 10);\n\n    const product = mockProductDetails.find((p) => p.id === id);\n\n    if (product) {\n      return res(ctx.status(200), ctx.json(product));\n    } else {\n      return res(ctx.status(404), ctx.json({ message: 'Product not found' }));\n    }\n  }),\n];\n\n// 테스트용 모의 함수\nexport const getMockProductDetail = (productId: number): ProductData | undefined => {\n  return mockProductDetails.find((p) => p.id === productId);\n};\n\n// 카테고리별 상품 조회 함수\nexport const getMockProductsByCategory = (categoryId: number): ProductData[] => {\n  return mockProductDetails.filter((p) => p.categoryId === categoryId);\n};\n\n// 랜덤 상품 조회 함수\nexport const getRandomMockProduct = (): ProductData => {\n  const randomIndex = Math.floor(Math.random() * mockProductDetails.length);\n  return mockProductDetails[randomIndex];\n};\n\n// 가격 범위 내 상품 조회 함수\nexport const getMockProductsByPriceRange = (minPrice: number, maxPrice: number): ProductData[] => {\n  return mockProductDetails.filter((p) => p.price >= minPrice && p.price <= maxPrice);\n};\n\n// 상품명 검색 함수\nexport const searchMockProductsByName = (keyword: string): ProductData[] => {\n  const lowerKeyword = keyword.toLowerCase();\n  return mockProductDetails.filter((p) => p.name.toLowerCase().includes(lowerKeyword));\n};\n","import { rest } from 'msw';\n\nimport type { ProductId, ProductOptionsData } from '@/types';\n\n// 모의 상품 옵션 데이터\nconst mockProductOptions: Record<ProductId, ProductOptionsData[]> = {\n  // 커피 (1-6)\n  1: [\n    { id: 1, name: 'ICE', quantity: 100, productId: 1 },\n    { id: 2, name: 'HOT', quantity: 100, productId: 1 },\n    { id: 3, name: 'LARGE', quantity: 50, productId: 1 },\n  ],\n  2: [\n    { id: 4, name: 'ICE', quantity: 100, productId: 2 },\n    { id: 5, name: 'HOT', quantity: 100, productId: 2 },\n    { id: 6, name: 'LARGE', quantity: 50, productId: 2 },\n  ],\n  3: [\n    { id: 7, name: 'ICE', quantity: 100, productId: 3 },\n    { id: 8, name: 'HOT', quantity: 100, productId: 3 },\n  ],\n  4: [\n    { id: 9, name: 'SINGLE', quantity: 100, productId: 4 },\n    { id: 10, name: 'DOUBLE', quantity: 50, productId: 4 },\n  ],\n  5: [\n    { id: 11, name: 'ICE', quantity: 100, productId: 5 },\n    { id: 12, name: 'HOT', quantity: 100, productId: 5 },\n    { id: 13, name: 'SOY MILK', quantity: 30, productId: 5 },\n  ],\n  6: [\n    { id: 14, name: 'ICE', quantity: 100, productId: 6 },\n    { id: 15, name: 'HOT', quantity: 100, productId: 6 },\n  ],\n\n  // 차 (7-11)\n  7: [\n    { id: 16, name: 'HOT', quantity: 100, productId: 7 },\n    { id: 17, name: 'LARGE', quantity: 50, productId: 7 },\n  ],\n  8: [\n    { id: 18, name: 'ICE', quantity: 100, productId: 8 },\n    { id: 19, name: 'HOT', quantity: 100, productId: 8 },\n  ],\n  9: [{ id: 20, name: 'HOT', quantity: 100, productId: 9 }],\n  10: [\n    { id: 21, name: 'HOT', quantity: 100, productId: 10 },\n    { id: 22, name: 'LARGE', quantity: 50, productId: 10 },\n  ],\n  11: [\n    { id: 23, name: 'ICE', quantity: 100, productId: 11 },\n    { id: 24, name: 'HOT', quantity: 100, productId: 11 },\n  ],\n\n  // 베이커리 (12-16)\n  12: [\n    { id: 25, name: 'ORIGINAL', quantity: 50, productId: 12 },\n    { id: 26, name: 'CHOCOLATE', quantity: 30, productId: 12 },\n  ],\n  13: [\n    { id: 27, name: 'ORIGINAL', quantity: 30, productId: 13 },\n    { id: 28, name: 'STRAWBERRY', quantity: 20, productId: 13 },\n  ],\n  14: [{ id: 29, name: 'ORIGINAL', quantity: 40, productId: 14 }],\n  15: [\n    { id: 30, name: 'PLAIN', quantity: 50, productId: 15 },\n    { id: 31, name: 'SESAME', quantity: 30, productId: 15 },\n  ],\n  16: [\n    { id: 32, name: 'ORIGINAL', quantity: 40, productId: 16 },\n    { id: 33, name: 'EXTRA CINNAMON', quantity: 20, productId: 16 },\n  ],\n\n  // 스무디 (17-19)\n  17: [\n    { id: 34, name: 'REGULAR', quantity: 50, productId: 17 },\n    { id: 35, name: 'LARGE', quantity: 30, productId: 17 },\n  ],\n  18: [\n    { id: 36, name: 'REGULAR', quantity: 50, productId: 18 },\n    { id: 37, name: 'LARGE', quantity: 30, productId: 18 },\n  ],\n  19: [\n    { id: 38, name: 'REGULAR', quantity: 50, productId: 19 },\n    { id: 39, name: 'LARGE', quantity: 30, productId: 19 },\n  ],\n\n  // 샌드위치 (20-22)\n  20: [\n    { id: 40, name: 'TOASTED', quantity: 30, productId: 20 },\n    { id: 41, name: 'NOT TOASTED', quantity: 30, productId: 20 },\n  ],\n  21: [\n    { id: 42, name: 'WHITE BREAD', quantity: 30, productId: 21 },\n    { id: 43, name: 'WHEAT BREAD', quantity: 30, productId: 21 },\n  ],\n  22: [\n    { id: 44, name: 'REGULAR', quantity: 30, productId: 22 },\n    { id: 45, name: 'EXTRA AVOCADO', quantity: 20, productId: 22 },\n  ],\n\n  // 아이스크림 (23-25)\n  23: [\n    { id: 46, name: 'CONE', quantity: 50, productId: 23 },\n    { id: 47, name: 'CUP', quantity: 50, productId: 23 },\n  ],\n  24: [\n    { id: 48, name: 'CONE', quantity: 50, productId: 24 },\n    { id: 49, name: 'CUP', quantity: 50, productId: 24 },\n  ],\n  25: [\n    { id: 50, name: 'CONE', quantity: 50, productId: 25 },\n    { id: 51, name: 'CUP', quantity: 50, productId: 25 },\n    { id: 52, name: 'EXTRA CHIPS', quantity: 30, productId: 25 },\n  ],\n};\n\n// MSW 핸들러\nexport const productOptionsMockHandler = [\n  rest.get('/api/products/:productId/options', (req, res, ctx) => {\n    const { productId } = req.params;\n    const options = mockProductOptions[productId as unknown as ProductId];\n\n    if (options) {\n      return res(ctx.status(200), ctx.json(options));\n    } else {\n      return res(ctx.status(404), ctx.json({ message: 'Product options not found' }));\n    }\n  }),\n];\n\n// 테스트용 헬퍼 함수\nexport const getMockProductOptions = (productId: ProductId): ProductOptionsData[] | undefined => {\n  return mockProductOptions[productId];\n};\n\nexport const getRandomMockProductOption = (\n  productId: ProductId,\n): ProductOptionsData | undefined => {\n  const options = mockProductOptions[productId];\n  if (options && options.length > 0) {\n    const randomIndex = Math.floor(Math.random() * options.length);\n    return options[randomIndex];\n  }\n  return undefined;\n};\n","import { rest } from 'msw';\n\nimport type { ProductData } from '@/types';\n\nexport const mockProducts: ProductData[] = [\n  // 커피 (categoryId: 1)\n  {\n    id: 1,\n    name: '아메리카노',\n    price: 4500,\n    imageUrl: 'https://example.com/americano.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 2,\n    name: '카페라떼',\n    price: 5000,\n    imageUrl: 'https://example.com/caffe-latte.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 3,\n    name: '카푸치노',\n    price: 5500,\n    imageUrl: 'https://example.com/cappuccino.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 4,\n    name: '에스프레소',\n    price: 4000,\n    imageUrl: 'https://example.com/espresso.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 5,\n    name: '바닐라 라떼',\n    price: 5500,\n    imageUrl: 'https://example.com/vanilla-latte.jpg',\n    categoryId: 1,\n  },\n  {\n    id: 6,\n    name: '카라멜 마키아토',\n    price: 5800,\n    imageUrl: 'https://example.com/caramel-macchiato.jpg',\n    categoryId: 1,\n  },\n\n  // 차 (categoryId: 2)\n  {\n    id: 7,\n    name: '녹차',\n    price: 4500,\n    imageUrl: 'https://example.com/green-tea.jpg',\n    categoryId: 2,\n  },\n  {\n    id: 8,\n    name: '얼그레이',\n    price: 4500,\n    imageUrl: 'https://example.com/earl-grey.jpg',\n    categoryId: 2,\n  },\n  {\n    id: 9,\n    name: '카모마일',\n    price: 4500,\n    imageUrl: 'https://example.com/chamomile.jpg',\n    categoryId: 2,\n  },\n  {\n    id: 10,\n    name: '잉글리시 브렉퍼스트',\n    price: 4500,\n    imageUrl: 'https://example.com/english-breakfast.jpg',\n    categoryId: 2,\n  },\n  {\n    id: 11,\n    name: '페퍼민트 티',\n    price: 4500,\n    imageUrl: 'https://example.com/peppermint-tea.jpg',\n    categoryId: 2,\n  },\n\n  // 베이커리 (categoryId: 3)\n  {\n    id: 12,\n    name: '크로와상',\n    price: 3500,\n    imageUrl: 'https://example.com/croissant.jpg',\n    categoryId: 3,\n  },\n  {\n    id: 13,\n    name: '치즈케이크',\n    price: 5500,\n    imageUrl: 'https://example.com/cheesecake.jpg',\n    categoryId: 3,\n  },\n  {\n    id: 14,\n    name: '초코 머핀',\n    price: 3000,\n    imageUrl: 'https://example.com/choco-muffin.jpg',\n    categoryId: 3,\n  },\n  { id: 15, name: '베이글', price: 3500, imageUrl: 'https://example.com/bagel.jpg', categoryId: 3 },\n  {\n    id: 16,\n    name: '시나몬 롤',\n    price: 4000,\n    imageUrl: 'https://example.com/cinnamon-roll.jpg',\n    categoryId: 3,\n  },\n\n  // 스무디 (categoryId: 5)\n  {\n    id: 17,\n    name: '딸기 스무디',\n    price: 5500,\n    imageUrl: 'https://example.com/strawberry-smoothie.jpg',\n    categoryId: 5,\n  },\n  {\n    id: 18,\n    name: '블루베리 스무디',\n    price: 5500,\n    imageUrl: 'https://example.com/blueberry-smoothie.jpg',\n    categoryId: 5,\n  },\n  {\n    id: 19,\n    name: '망고 스무디',\n    price: 5800,\n    imageUrl: 'https://example.com/mango-smoothie.jpg',\n    categoryId: 5,\n  },\n\n  // 샌드위치 (categoryId: 6)\n  {\n    id: 20,\n    name: '햄치즈 샌드위치',\n    price: 5500,\n    imageUrl: 'https://example.com/ham-cheese-sandwich.jpg',\n    categoryId: 6,\n  },\n  {\n    id: 21,\n    name: '에그 샐러드 샌드위치',\n    price: 5000,\n    imageUrl: 'https://example.com/egg-salad-sandwich.jpg',\n    categoryId: 6,\n  },\n  {\n    id: 22,\n    name: '치킨 아보카도 샌드위치',\n    price: 6000,\n    imageUrl: 'https://example.com/chicken-avocado-sandwich.jpg',\n    categoryId: 6,\n  },\n\n  // 아이스크림 (categoryId: 7)\n  {\n    id: 23,\n    name: '바닐라 아이스크림',\n    price: 3500,\n    imageUrl: 'https://example.com/vanilla-ice-cream.jpg',\n    categoryId: 7,\n  },\n  {\n    id: 24,\n    name: '초코 아이스크림',\n    price: 3500,\n    imageUrl: 'https://example.com/chocolate-ice-cream.jpg',\n    categoryId: 7,\n  },\n  {\n    id: 25,\n    name: '민트 초코칩 아이스크림',\n    price: 4000,\n    imageUrl: 'https://example.com/mint-choco-ice-cream.jpg',\n    categoryId: 7,\n  },\n];\n\nexport const productsMockHandler = [\n  rest.get('/api/products', (req, res, ctx) => {\n    const page = Number(req.url.searchParams.get('page')) || 0;\n    const size = Number(req.url.searchParams.get('size')) || 10;\n    const sort = req.url.searchParams.get('sort') || 'name,asc';\n    const categoryId = Number(req.url.searchParams.get('categoryId'));\n\n    let filteredProducts = [...mockProducts];\n\n    // 카테고리 필터링\n    if (categoryId) {\n      filteredProducts = filteredProducts.filter((product) => product.categoryId === categoryId);\n    }\n\n    // 정렬\n    const [sortField, sortOrder] = sort.split(',') as [keyof ProductData, 'asc' | 'desc'];\n    filteredProducts.sort((a, b) => {\n      if (sortField in a && sortField in b) {\n        const aValue = a[sortField];\n        const bValue = b[sortField];\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n        }\n        if (typeof aValue === 'number' && typeof bValue === 'number') {\n          return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;\n        }\n      }\n      return 0;\n    });\n\n    // 페이지네이션\n    const startIndex = page * size;\n    const endIndex = startIndex + size;\n    const paginatedProducts = filteredProducts.slice(startIndex, endIndex);\n\n    return res(ctx.status(200), ctx.json(paginatedProducts));\n  }),\n];\n","import { rest } from 'msw';\n\nimport type { WishlistProduct } from '@/types';\n\nconst mockWishlist: WishlistProduct[] = [\n  {\n    id: 1,\n    product: {\n      id: 1,\n      name: 'Product A',\n      price: 100,\n      imageUrl: 'http://example.com/product-a.jpg',\n    },\n  },\n  {\n    id: 2,\n    product: {\n      id: 2,\n      name: 'Product B',\n      price: 150,\n      imageUrl: 'http://example.com/product-b.jpg',\n    },\n  },\n];\n\nexport const wishlistMockHandlers = [\n  // 위시 리스트 조회\n  rest.get('/api/wishes', (req, res, ctx) => {\n    const page = req.url.searchParams.get('page') || '0';\n    const size = req.url.searchParams.get('size') || '10';\n    const start = parseInt(page, 10) * parseInt(size, 10);\n    const end = start + parseInt(size, 10);\n\n    return res(ctx.status(200), ctx.json(mockWishlist.slice(start, end)));\n  }),\n\n  // 위시 리스트에 상품 추가\n  rest.post('/api/wishes', async (req, res, ctx) => {\n    const { productId } = await req.json();\n    const newWish: WishlistProduct = {\n      id: mockWishlist.length + 1,\n      product: {\n        id: productId,\n        name: `Product ${String.fromCharCode(64 + productId)}`, // 예: 'Product C'\n        price: 200, // 임의의 가격\n        imageUrl: `http://example.com/product-${String.fromCharCode(96 + productId)}.jpg`,\n      },\n    };\n    mockWishlist.push(newWish);\n\n    return res(ctx.status(201), ctx.json({ productId }));\n  }),\n\n  // 위시 리스트에서 상품 제거\n  rest.delete('/api/wishes/:id', (req, res, ctx) => {\n    const { id } = req.params;\n    const index = mockWishlist.findIndex((wish) => wish.id === parseInt(id as string, 10));\n\n    if (index !== -1) {\n      mockWishlist.splice(index, 1);\n    }\n\n    return res(ctx.status(200), ctx.json({}));\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/api/mocks/categories.mock';\nimport { loginMockHandler } from '@/api/mocks/login.mock';\nimport { orderHandlers } from '@/api/mocks/order.mock';\nimport { productDetailMockHandler } from '@/api/mocks/productDetail.mock';\nimport { productOptionsMockHandler } from '@/api/mocks/productOptions.mock';\nimport { productsMockHandler } from '@/api/mocks/products.mock';\nimport { wishlistMockHandlers } from '@/api/mocks/wishlist.mock';\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...productDetailMockHandler,\n  ...productOptionsMockHandler,\n  ...loginMockHandler,\n  ...wishlistMockHandlers,\n  ...orderHandlers,\n);\n"],"names":["mockCategories","id","name","color","imageUrl","description","categoriesMockHandler","rest","get","_","res","ctx","status","json","req","categoryId","params","category","find","c","parseInt","message","fakeUsers","email","password","loginSuccessResponse","token","loginMockHandler","url","searchParams","post","body","u","authCode","mockOrders","optionId","count","orderHandlers","page","Number","size","startIndex","endIndex","paginatedOrders","slice","async","orderData","newOrder","Math","floor","random","productId","productQuantity","push","delete","orderId","orderIndex","findIndex","order","splice","concat","mockProductDetails","price","productDetailMockHandler","product","p","mockProductOptions","quantity","productOptionsMockHandler","options","mockProducts","productsMockHandler","sort","filteredProducts","filter","sortField","sortOrder","split","a","b","aValue","bValue","localeCompare","paginatedProducts","mockWishlist","wishlistMockHandlers","start","end","newWish","length","String","fromCharCode","index","wish","worker","setupWorker"],"sourceRoot":""}